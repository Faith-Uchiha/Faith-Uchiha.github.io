{"meta":{"title":"My DreamLand My Avalon","subtitle":null,"description":"要磨砺自己，要坚持梦想<br>要耐下心，不要轻易烦躁<br>要找准方向，找到正确方法","author":"Amaterasu.Z","url":"https://faith-uchiha.github.io"},"pages":[{"title":"标签","date":"2017-08-17T15:58:16.000Z","updated":"2017-08-18T05:42:05.752Z","comments":false,"path":"tags/index.html","permalink":"https://faith-uchiha.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-08-17T15:58:37.000Z","updated":"2017-08-18T10:17:26.017Z","comments":false,"path":"categories/index.html","permalink":"https://faith-uchiha.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"命令格式","slug":"命令格式","date":"2017-10-29T15:08:55.000Z","updated":"2017-10-29T15:15:13.404Z","comments":true,"path":"2017/10/29/命令格式/","link":"","permalink":"https://faith-uchiha.github.io/2017/10/29/命令格式/","excerpt":"","text":"[]——表示可选参数&lt;&gt;——表示必须 参数的格式：第一种：参数用-的说明后面的参数是字符形式（Unix 风格）。第二种：参数用–的说明后面的参数是单词形式（GNU 风格）。第三种：参数前有横的是 System V风格。第四种：参数前没有横的是 BSD风格。","categories":[],"tags":[{"name":"Linux、git、命令提示格式","slug":"Linux、git、命令提示格式","permalink":"https://faith-uchiha.github.io/tags/Linux、git、命令提示格式/"}]},{"title":"Github和git命令总结","slug":"Github和git命令总结","date":"2017-10-29T13:42:31.000Z","updated":"2017-10-29T15:27:07.369Z","comments":true,"path":"2017/10/29/Github和git命令总结/","link":"","permalink":"https://faith-uchiha.github.io/2017/10/29/Github和git命令总结/","excerpt":"Github1.仓库用于存放项目","text":"Github1.仓库用于存放项目 2.分支master：主分支，存放最终版本代码 其他分支：对主分支的拷贝，我们在其他分支修改再合并到master。 在分支中对某个文件修改，然后Cmommit Changes就可以修改。 3.请求代码合并pull request：子分支请求和master分支进行合并，确认之后可以提交 merge pull request：确认合并到master。 如果想要删掉已经合并的分支，Delete branch git命令1.git clone https：//先去repo页面点绿色的Clone or download ，复制地址 然后就可以在某个文件夹，右键-&gt;git bash使用命令 git clone + 已复制的https地址 上面的只能创建master分支。如何指定特定分支？ eg：git clone -b feature-edits https://github.com/Faith-Uchiha/hello-world.git git clone 分支名 repo https地址 2.git pull拉取该分支最新内容，与本地（当前电脑、文件夹）对比。就是更新该分支的。 3.git addgit add .——添加所有目录 git add 文件名——添加文件 注意此命令只是添加到了git队列，并没有真正上传到仓库分支 即使不是添加新文件，而是在旧文件上修改，想要更新到分支上，也要git add git commit git push 4.git commit -am-am 后面跟上注释，双引号 5.git push真正添加到分支。","categories":[{"name":"Github和git","slug":"Github和git","permalink":"https://faith-uchiha.github.io/categories/Github和git/"}],"tags":[]},{"title":"类加载和初始化顺序的问题","slug":"类加载和初始化顺序的问题","date":"2017-09-30T07:53:43.000Z","updated":"2017-09-30T09:16:58.756Z","comments":true,"path":"2017/09/30/类加载和初始化顺序的问题/","link":"","permalink":"https://faith-uchiha.github.io/2017/09/30/类加载和初始化顺序的问题/","excerpt":"问题再现在为坦克大战的坦克增加血条显示时，采用内部类BloodBlock + 构造方法的写法，这时问题来了，发现血条怎么都画不出来。 下面是问题代码。","text":"问题再现在为坦克大战的坦克增加血条显示时，采用内部类BloodBlock + 构造方法的写法，这时问题来了，发现血条怎么都画不出来。 下面是问题代码。 TankWar.java中1Tank myTank = new Tank(400,300,true,this); Tank.java中12345678910111213141516171819202122232425262728293031323334353637private int x,y;BloodBlock bb = new BloodBlock(x,y);//感觉参数没传递进去？ public Tank(int x, int y, boolean good) &#123; this.x = x; this.y = y; this.good = good; &#125; public Tank(int x, int y,boolean good,TankFrame tc) &#123; this(x,y,good); this.tc = tc; &#125; public Tank(int x, int y,boolean good,Tank.Direction dir,TankFrame tc) &#123; this(x,y,good,tc); this.dir = dir; &#125; private class BloodBlock &#123; int x ,y; public BloodBlock(int x,int y) &#123; this.x = x; this.y = y; &#125; public void draw(Graphics g) &#123; Color c = g.getColor(); g.setColor(Color.RED); g.drawRect(this.x, this.y-20, WIDTH, 20); g.fillRect(this.x, this.y-20, getLife()*WIDTH/100, 20); g.setColor(c); &#125; &#125; 很自然的将调用过程理解为，调用Tank()构造方法，将400,300传递给内部成员变量x,y； 然后再调用BloodBlock的构造方法，将Tank的x,y赋值给BloodBlock的x,y；画出血条。 实际上，执行过程并不是如此 问题解决这里就涉及到类加载和初始化的顺序问题。 初始化顺序为：静态域（静态变量，静态代码块）-&gt;动态域（成员变量，普通代码块）-&gt;构造器。 1.初次主动使用某各类时，会加载类，此时为static变量分配内存，并设置默认值（0，null，false）。然后开始初始化static域：静态域中各部分执行的先后顺序与代码先后顺序有关（也就是说，静态代码块和静态变量，谁先执行，要看谁写在前面） 2.然后是执行成员变量的初始化和代码块：执行先后顺序也是与代码位置有关 3.最后构造器。 所以，上面的错误原因就是，在成员变量bb初始化的时候： BloodBlock bb = new BloodBlock(x,y); 这里还未执行Tank的构造方法，所以这个时候Tank的x,y并未赋值，为默认值0。 改正：可以把new BloodBlock(x,y);这句话放入Tank()的构造方法里。 实际上后面测试发现：如果用构造方法的话，血块就会固定在初始位置，然而血块应该是跟随Tank移动的，所以直接用Tank的x,y就好了 不用自己写构造方法。 例子可参考:阿里巴巴14年校招附加题的解析看了这个例子会对初始化过程有更深入的了解。","categories":[{"name":"Java问题汇总","slug":"Java问题汇总","permalink":"https://faith-uchiha.github.io/categories/Java问题汇总/"}],"tags":[]},{"title":"JavaSE练手项目之问题","slug":"JavaSE练手项目之问题","date":"2017-09-28T15:02:19.000Z","updated":"2017-09-28T15:19:27.792Z","comments":true,"path":"2017/09/28/JavaSE练手项目之问题/","link":"","permalink":"https://faith-uchiha.github.io/2017/09/28/JavaSE练手项目之问题/","excerpt":"今天在使用 java.util.Random类产生随机数的时候，遇到一个问题。 以下是出问题的代码","text":"今天在使用 java.util.Random类产生随机数的时候，遇到一个问题。 以下是出问题的代码 123456if(mis_step==0)&#123; mis_step = r.nextInt(5); this.fire();&#125;mis_step --; mis_step在对象new出来之后，成员变量已经用r.next(5)初始化。 在Debug中运行发现：Wacth窗中观察，mis_step会在运行一段时间之后变为负数，过了一会儿又变回了正数。 解决：变为负数的原因是，nextInt(Bound) 返回的值是0~Bound-1的Int类型数 很有可能在if的 mis_step = r.nextInt(5)这个赋值语句中得到0值，随后mis_step –就会变为负数，然后就死掉，不会再有重新复制的机会，炮弹再也不会发出。 看到变回正数的原因是：其实看到的是下一个Tank的mis_step了，而不是自身自动回复。 所以,为了避免出现负数，一般的用法都是 r.nextInt(Bound)+XX","categories":[{"name":"Java问题汇总","slug":"Java问题汇总","permalink":"https://faith-uchiha.github.io/categories/Java问题汇总/"}],"tags":[]},{"title":"JavaSESocket编程之问题","slug":"JavaSESocket编程之问题","date":"2017-09-16T02:31:24.000Z","updated":"2017-09-16T04:17:17.267Z","comments":true,"path":"2017/09/16/JavaSESocket编程之问题/","link":"","permalink":"https://faith-uchiha.github.io/2017/09/16/JavaSESocket编程之问题/","excerpt":"问题1从标准输入流（即控制台输入）读取字符，不能使用ReadUTF()方法，否则会读取不进来。","text":"问题1从标准输入流（即控制台输入）读取字符，不能使用ReadUTF()方法，否则会读取不进来。 问题2使用BufferedReader类的readLine()方法读取System.in的输入之后， 再用WriteUTF()发送给Server，server用ReadUTF()读的话，会抛异常。 解决办法对于问题1改用BufferedReader的ReadLine() 对于问题2尚未解决。个人猜测：因为编码不一样，WriteUTF/ReadUTF是要求Unicode编码，而中文操作系统，从标准输入流输入的应该是GBK编码 待以后深入学习Java能够看Java源码的时候再来解决。 问题2解决：真正的原因并不是编码的问题，即使client端改为PrintWriter类的println方法，server端改为BufferedReader类的readLine()方法，还是会有异常！ 而是没有调用flush()方法！！！。缓冲区没满，不调用flush()，输出流是不会输出的。所以才会抛出异常。 重要： flush()方法何时使用：涉及到缓冲区的类，都应该使用。 建议除了FileOutputStream和FileWriter类，BufferedWriter、DataOutputStream、PrintWriter、ObjectOutputstream等输出流都应该写flush()。 File***输出流是以二进制的形式写入的，所以flush()调用也无效果，可用可不用。 FileOutputStream()没有重写flush()，所以没效果","categories":[{"name":"Java问题汇总","slug":"Java问题汇总","permalink":"https://faith-uchiha.github.io/categories/Java问题汇总/"}],"tags":[]},{"title":"指针1","slug":"指针1","date":"2017-08-22T07:52:55.000Z","updated":"2017-09-16T02:26:53.259Z","comments":true,"path":"2017/08/22/指针1/","link":"","permalink":"https://faith-uchiha.github.io/2017/08/22/指针1/","excerpt":"之前学C语言的时候，指针这一块总觉得很难，一直没有信心完全弄明白。 看过一遍书之后，知识点记得几天然后马上就忘记了。 这次争取完全理解，并且能够熟练应用！","text":"之前学C语言的时候，指针这一块总觉得很难，一直没有信心完全弄明白。 看过一遍书之后，知识点记得几天然后马上就忘记了。 这次争取完全理解，并且能够熟练应用！","categories":[{"name":"C语言巩固——《C和指针》读书笔记","slug":"C语言巩固——《C和指针》读书笔记","permalink":"https://faith-uchiha.github.io/categories/C语言巩固——《C和指针》读书笔记/"}],"tags":[]},{"title":"First","slug":"First","date":"2017-08-16T13:58:18.000Z","updated":"2017-08-18T14:05:46.884Z","comments":true,"path":"2017/08/16/First/","link":"","permalink":"https://faith-uchiha.github.io/2017/08/16/First/","excerpt":"这是我建博客后尝试写的一个.md测试 遇到的坑1.yilia主题的所有文章按钮总算是所有东西都弄好了，弄“所有文章”的显示的时候，竟然报错 ERROR plugin load failed hexo-generator-json-content","text":"这是我建博客后尝试写的一个.md测试 遇到的坑1.yilia主题的所有文章按钮总算是所有东西都弄好了，弄“所有文章”的显示的时候，竟然报错 ERROR plugin load failed hexo-generator-json-content 后来才发现，原来是因为我的node.js的版本太低了 原来我用的是yilia主题，后来发现categories和tags怎么都搞不好。 最后就换了next主题 2.next主题添加站内搜索hexo-generator-searchdb这个也安装了： 1$ npm install hexo-generator-searchdb --save 站点配置文件也改了： 12345search: path: search.xml field: post format: html limit: 10000 一直无法搜索，原来还少了最后一步：主题配置文件 12local_search: enable: true 3.Markdown语法问题使用“```” 这个字符的时候，最好第一个“```”之后，（这里的`是用转义字符“\\”打的）回车再写文本 不然很容易和下一个要引用的段穿在一起 还有#后面要空格才能接文本","categories":[{"name":"初入博客","slug":"初入博客","permalink":"https://faith-uchiha.github.io/categories/初入博客/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://faith-uchiha.github.io/tags/随笔/"},{"name":"初次尝试","slug":"初次尝试","permalink":"https://faith-uchiha.github.io/tags/初次尝试/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-08-16T11:42:04.408Z","updated":"2017-08-17T14:49:32.876Z","comments":true,"path":"2017/08/16/hello-world/","link":"","permalink":"https://faith-uchiha.github.io/2017/08/16/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}